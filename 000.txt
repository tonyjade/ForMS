Usage of vectors:
---------------------------------------------------------------------------------------------------------------------
0) #include <vector>
1) v.push_back(0);  // Insert 0 into the vector v;

Usage of unordered_map:
---------------------------------------------------------------------------------------------------------------------
1) m.count(e);      // The number of elements in the container, use it to check whether the element is in the map.
2) m.find(key)      // Check whether the element responding to the key exists. 
    Example:
    --------------------------------------------------------------------------------
    if (m.find('s') != m.end()) { // Found an element in the table. 
        return; 
    }

Usage of string:
---------------------------------------------------------------------------------------------------------------------
0) #include <string>
1) s.size();       // Size of string, STL style, same as length().
2) s.length();     // Length of string, C style, same as size().
3) s.substr(0, 3); // Generate substring.
    Note: s.substr(pos, len)
          pos -- Positon of the first character.
          len -- Number of characters, *** it's a number, not the end position ***
4) string::iterator
    Example:
    --------------------------------------------------------------------------------
    =>  int left = 0, right = s.size() - 1;
    =>  string::iterator left = s.begin(), right = s.end();  // iterator等同于指针,取值用*left 和 *right.
    =>  auto left = s.begin(), right = s.end();              // Combined with auto. 

5) std::toupper    // to upper case.
   std::tolower    // to lower case.
   std::isalnum    // is alphanum, letters or digits.
   std::isdigit    // is digit, 0-9.
   std::isxdigit   // is hexadecimal, 0-9, A-F.
   std::isspace    // is space.
   std::ispunct    // is punctuation, neither spaces or digits or letters.



Usage of algorithm:
---------------------------------------------------------------------------------------------------------------------
0) #include <algorithm>
1) std::transform(s.begin(), s.end(), s.begin(), ::toupper)  // Transform string to upper case.
   std::transform(s.begin(), s.end(), s.begin(), ::tolower)  // Transform string to lower case.
    Note: 
        Use ::toupper/::tolower instead of std::toupper/std::tolower. That is toupper/tolower defined in the global 
        namespace, instead of the one defined in std namespace.
        If we use it like this:
            using namespace std;
            ... 
            transform(s.begin(), s.end(), s.begin(), toupper);  <-- error ! 
        Your code is not working, because there is another overloaded function toupper/tolower in std.
        Complier would say unresolved overloaded function type in the error message.








Reference:
    http://stackoverflow.com/questions/7131858/stdtransform-and-toupper-no-matching-function/7132065#7132065









