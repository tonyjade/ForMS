-------------------------------------------------------------------------------------------------------------------
C++ Cast

(一) dynamic_cast只用于对象的指针和引用

1) dynamic_cast用于指针转换
    a) 子类指针转为父类，ok~
    b) 父类指针转为子类，两种情况：
        i) 父类指针真的指向子类对象，ok~
       ii) 反之，失败，返回nullptr！
2) dynamic_cast用于引用转换 (和指针情况类似)
3) 将nullptr指针转为任意类型指针，将任意类型指针转为void*指针

(二) static_cast更宽泛

1) 基本类型转换 (如：int => char, non-const => const对象, ...)
2) 空指针转为目标指针
3) 同样可以用于指针和引用，如果对于类中对象之间的上下转换，如果向下转化有问题，编译时候不会报错，运行时会报错。

(三) reinterpret_cast最广泛的转化，几乎同C-style转换

适用于如下情况：
1) int和指针转换
2) 无关联类指针之间转换
3) 函数指针之间的转换

(四) const_cast

用于去除转换对象的const和volatile

小结

dynamic_cast用于父类子类指针和引用转化，最安全也最昂贵；
static_cast类似带编译时检验的C style cast，编译器隐式转换是基于static_cast完成的；
reinpreter_cast和C style cast没有区别；
const_cast用于把const类型转换为非const类型。


dynamic_cast的例子：
    避免code bloating (代码膨胀)

例如：
template class MyBase<class T> { ... };

如果利用该模板对应生成对个类：
MyBase<int>, MyBase<double>, MyBase<char>

则编译器需要三次生成类代码：

class MyBase_int {
    ... //抄一遍MyBase<class T>
};
class MyBase_double {
    ... //抄一遍MyBase<class T>
};
class MyBase_char {
    ... //抄一遍MyBase<class T>
};

如果统一用<void*>或者用共同基类存放，则只一套代码，只是使用的时候用cast转换一下即可：
vector<MyBase*> v;
MyForm_Int* p = dynamic_cast<MyForm_Int*>(v[0]);




-------------------------------------------------------------------------------------------------------------------
static成员变量和成员函数

(一) static成员函数：
1) 只能访问static成员变量, 原因在于：
    a. 静态成员函数和对象无关，因此没有this指针，而访问对象中非静态成员，需要通过this指针访问，因此不能访问
       非static成员变量。
    b. 而static成员不属于特定对象，同样属于类，因此可直接引用。
2) 不能定义为virtual，原因在于：
    a. 静态成员函数，不通过对象调用，也就是没有隐藏的this指针
    b. virtual成员函数，一定通过对象调用，有隐含的this指针

    a' 静态成员函数都是静态决议的 (编译时绑定)
    b' virtual函数基于动态决议的  (运行时绑定)

(二) static成员变量:
    可以被子类继承，只是取决于access permission，例如：public是可以共享访问的
    


-------------------------------------------------------------------------------------------------------------------
C++ 类成员函数调用delete this

为什么类成员调用delete this可行？
object只含有数据成员和vptr，代码单独放在类对象外，因此保证了该操作的可行性。

析构函数调用delete this为什么不行？
因为delete this本质就是调用析构函数，然后释放内存，析构函数调用delete this相当于无限循环调自己。

注意点：
1. 只有new出来的对象才能调用delete this。
2. commit suicide的函数应当是最后调用的函数。
3. 设计模式有个state pattern会用到这种情况, 用于状态转换。


-------------------------------------------------------------------------------------------------------------------
inline 关键字

内联函数必须在调用该函数的每个cpp文件中定义，且对于同名的inline函数，不能有不同的实现，因此往往放在头文件中。

* 太过复杂的代码不适合inline，例如：函数内有循环或者递归，则该函数不能用inline。
* virtual函数不能inline，因为inline意味着"执行前，先将函数替换"，inline是编译期间的行为；
  而virtual意味着 "等待，直到运行期间方能确定哪个函数执行"。

inline的危害：
* 增大目标代码(object code)，不恰当的使用会造成代码膨胀(code bloating)，导致 gigantic memory hog。

inline和define的区别：
* inline是编译期间的行为，#define是预处理期间的行为。inline仍是函数，会检查参数合法性。


-------------------------------------------------------------------------------------------------------------------
friend classes (友元类)

C++类中friend关键字声明的对象可以访问该类的private和protected成员。
可以是某个类、某个函数、或者某个类中的某个函数。
friend的访问授权是编译时检查的。

例如：friend member function

class BinaryTree;  // 前向声明

class Node {
public:
    void func(BinaryTree*);
    ...
};

class BinaryTree {
public:
    friend void Node::func(BinaryTree*);  // class member friend 
    ...
};

例如：friend member class

class Node {
public:
    friend class BinaryTree;
private:
    int data
    ...
};

BinaryTree {
private:
    Node *root;
    void findNode(int key);  // 可以直接访问Node里的内容了 ~
};





-------------------------------------------------------------------------------------------------------------------
operator new 和 new operator

(一) 定义

Example:
    X *xp = new X;  
Explain:
    该部分new为new operator，将调用类X中的operator new，为该类对象分配内存，然后调用当前实例的构造函数。
    因此，new operator包括operator new和object的构造函数。
Example:
    delete xp;  
Explain:
    该部分的delete为delete operator，它将调用该实例的析构函数，然后调用类X的operator delete，释放该实例内存空间。

* 说明
1. new operator 和 delete operator 不能改变，这是基于C++标准。
2. operator new 和 malloc。
   1) operator new 和 operator delete 和C中的malloc和free对应，只负责分配和释放内存空间。
   2) 使用 operator new 和 operator delete 必须配对，不能使用 free 释放 operator new分配的空间，因为对内存使用的
      登记方式不同。
3. new operator 和 operator new的关系。
   1) 调用operator new分配内存。
   2) 调用构造函数生成对象。
   3) 返回相应指针。 



(二) Why use it ?

为了效率，缺省的operator new/delete有通用性，但是特定场合可以进一步提高性能，比如：动态分配大量但是小的对象时。


-------------------------------------------------------------------------------------------------------------------
智能指针

(一) unique_ptr -- A memory doesn't have to be shared. (无copy constructor)
(二) shared_ptr -- A memory resource should be shared. 
(三) weak_ptr   -- holds a reference to an object managed by a shared_ptr, but doesn't contribute to the reference count.
                   用于打破循环依赖，例如：parent和children的相互依赖。

** shared_ptr 和 auto_ptr 的区别  **
1. shared_ptr 共享，auto_ptr 独占。
2. shared_ptr 可拷贝和赋值，auto_ptr 不能。
3. shared_ptr 的缺点是可能造成循环引用。


Example: Implementation

分析：
    1) new一个SmartPtr对象，引用计数加1.
    2) 解引用*，返回*this.
    3) 拷贝构造，引用计数加1.
    4) 赋值操作，左边引用计数减1，右边加1.

template <typename T>
class SmartPtr {
public:
    SmartPtr(T*);
    SmartPtr(SmartPtr&);
    T* operator->();
    T& operator*();
    SmartPtr& operator=(const SmartPtr&); 
    ~SmartPtr();
private:
    int *count;
    T *tp;
};

template <typename T>
SmartPtr<T>::SmartPtr(T* p): count(new int(1)), tp(p) {

}

template <typename T>
SmartPtr<T>::SmartPtr(SmartPtr& sp) {
    count = &(++*sp.count);
    tp = sp.tp;
}

template <typename T>
T* SmartPtr<T>::operator->() {
    return tp;
}

template <typename T>
T& SmartPtr<T>::operator*() {
    return *tp;
}

template <typename T>
SmartPtr<T>& SmartPtr<T>::operator=(SmartPtr& sp) {
    if (this == sp) {
        return *this;
    }
    ++(*sp.count);
    if (--(*count) == 0) {
        delete count;
        delete tp;
    }
    this->tp = sp.tp;  // 不会内存泄漏？？
    this->count = sp.count;  
    return *this;
}


-------------------------------------------------------------------------------------------------------------------
public, protected and private 继承

Property        Public Inheritance     Protected Inheritance     Private Inheritance
______________________________________________________________________________________
public members   |    public           |      protected          |     private        |
protected members|    protected        |      protected          |     private        |
private members  |  Only Base Access   |   Only Base Access      |   Only Base Access |
______________________________________________________________________________________|
* public 和 protected 可以隐式向上转换，但 private 不行~ *
* private继承方式类似final的感觉，一切到该derived class就全终止了~




-------------------------------------------------------------------------------------------------------------------
STL 容器适配器

适配器 (adaptor) -- 利用已知的类型构建另外一种类型，实现不同的行为。
容器适配器 -- 让一种已存在的容器类型，采用另外一种不同的抽象类型工作方式实现。
例如：
    stack 和 queue 默认利用deque实现，priority_queue默认利用vector实现。
** priority_queue 可以理解为heap，每次pop都pop出最大的值 **



-------------------------------------------------------------------------------------------------------------------
查看文件上次被修改时间
    stat FileName
    ls -lc FileName

查看某文件被哪个进程占用
    ps -ef | grep 'FileName'


-------------------------------------------------------------------------------------------------------------------
关于kill

kill -9  pid
kill -15 pid

raymond@goertekssc-PowerEdge-R420:~$ kill -l
 1) SIGHUP	 2) SIGINT	 3) SIGQUIT	 4) SIGILL	 5) SIGTRAP
 6) SIGABRT	 7) SIGBUS	 8) SIGFPE	 9) SIGKILL	10) SIGUSR1
11) SIGSEGV	12) SIGUSR2	13) SIGPIPE	14) SIGALRM	15) SIGTERM
... 

15) SIGTERM -- 程序收到-15信号，会先释放资源再停止，如果程序正等待IO，可能不会马上响应，因此，多半会阻塞的。
9)  SIGKILL -- 基本都能立即响应。

kill 默认执行的就是 -15 .




-------------------------------------------------------------------------------------------------------------------
template

在.h头文件中若有template function，在a.cpp和b.cpp分别利用该模板生成int型的函数。
则同时有两个int型函数，编译器只关心各自的存在，而链接时会发现有两个int型函数，一般改变名字即可。
** linker是所有语言通用的，只有complier是对C++特殊定制的。

类模板：

template <class T1, class T2>
class A {
public:
   void f(T1 a, T2 b); 
};

template <class T1, class T2>
void A<T1, T2>::f(T1 a, T2 b) {
    cout << a << ", " << b << endl;
}



-------------------------------------------------------------------------------------------------------------------
DataBase -- MySQL

MySqlServer <---- MySqlClient

登录：
    mysql -h localhost -u root -p (什么都不写就是默认的localhost/root/nullpwd)
    (登录就是 MySql client 连 server)

查看数据库和表：
    show databases; 
    show tables;

一个数据库包含多个表：
    表是行列结构，多张表放在一个数据库，多个数据库放在一个database server。

学号    姓名    地区    年龄    专业
----------------------------------------------
00001   马一方  山东    31      计算机
00002   陈小双  江西    29      药物分析

课号    课程      教室    老师
----------------------------------------------
0001    数据结构  301     马维旻
0002    C语言     502     吕威

使用某个数据库：
    use XXXdatabase;

认识SQL -- Structured Query Language

DML -- Data Manipulation Language Statements (增、删、改、查)
DDL -- Data Definition Language Statements   (建表、建库、建试图)
DCL -- Data Control Language Statements      (管理权限)


创建数据库：
    create database goertek;
删除数据库：
    drop database goertek;
使用goertek数据库：
    use goertek;

建立table：
    (建表的过程就是声明列的过程)

建表语句：
    create table TableName (
        列名1  列类型  列属性  默认值，
        ... 
        列名n  列类型  列属性  默认值
    );

Example:    
mysql> create table employee (
    ->     no    int,
    ->     name  varchar(20),
    ->     pay   int,
    ->     level int
    -> );
Query OK, 0 rows affected (0.01 sec)

mysql> show tables;
+-------------------+
| Tables_in_goertek |
+-------------------+
| employee          |
+-------------------+
1 row in set (0.00 sec)



-------------------------------------------------------------------------------------------------------------------
同步互斥

同步条件 -- pthread_cond_t

使用 -- 配合mutex使用

Example:

 pthread_cond_t  warpBufferConsumedCv; // 同步条件变量，需配合mutex共同使用，在lock/unlock之间pthread_con_wait，以防止进入wait前其他signal干扰。
 pthread_mutex_t warpBufferConsumedMutex;

(svrApiCore.cpp)

svrSubmitFrame
------------------------------------------------------------------------------------------
1. 通过 App 传递的 pFrameParams, 完成赋值；
   更新 gAppContext->modeContext->submitFrameCount. 

2. 等待，直到 eyebuffer 渲染完毕
while (true)
{
    // 等待TimeWarp线程发signal，告知TimeWarp已经取到图像
    pthread_mutex_lock(&gAppContext->modeContext->warpBufferConsumedMutex);
    pthread_cond_wait(&gAppContext->modeContext->warpBufferConsumedCv, &gAppContext->modeContext->warpBufferConsumedMutex);
    pthread_mutex_unlock(&gAppContext->modeContext->warpBufferConsumedMutex);

    if (...) {  // 如果一切正常，就 break;
        break;
    }
}

(TimeWarp.cpp)

ThreadMain
------------------------------------------------------------------------------------------

while (true) 
{
    从buffer取图像，未互斥，因为调用glClientWaitSync，也许有同步机制 ~

    // 发送signal给渲染线程，可以进行渲染了~
    if (!pthread_mutex_trylock(&gAppContext->modeContext->warpBufferConsumedMutex)) 
    {
        pthread_cond_signal(&gAppContext->BufferConsumeCv);
        pthread_mutex_unlock(&gAppContext->BufferConsume);
    }
}

Question -- 如果渲染更快，会一直等待 ?
A:
    不会，渲染大约60Hz，送屏严格按照90Hz的屏幕Vsync信号~



-------------------------------------------------------------------------------------------------------------------
多线程

1. 线程安全是什么？
A：你的代码如果在多线程场景下和单线程场景下的结果永远相同，则是线程安全。

2. 进程（调度）和线程（调度）的区别？
A: 线程是调度的最小单位，有的系统cpu调度的是线程，有的系统cpu调度的是进程，进程内部再进行线程调度。
   对于Linux系统，并无明确的process和thread的区别，调度的基本单位都是task。
   被系统分配资源的是进程 -- cpu state(registers etc), MMU state(page mapping), permission state(uid, gid),
   communication states(open files, signal handlers).
   而进程所占资源主要是cpu state和MMU state。
   调度进程分为两步：
   1）切换地址空间，内核中可能涉及切换内存页表等。
   2）切换上下文和栈。
   线程调度只做第二步。
   进程有独立的地址空间，线程只拥有局部变量和堆栈；进程健壮性更强，线程切换更灵活。





-------------------------------------------------------------------------------------------------------------------
Explain RTTI


-------------------------------------------------------------------------------------------------------------------
Explain Selection sorting/ insertion sorting.  

































